{-# LANGUAGE FlexibleInstances #-}
module Year2015.Day25 where
import Challenge

--  The first code is 20151125.
--  After that, each code is generated by taking the previous one, multiplying it by 252533,
--  and then keeping the remainder from dividing that value by 33554393.

sumUpTo :: Int -> Int
sumUpTo n = (n * (n + 1)) `div` 2

fromCoords :: (Int, Int) -> Int
fromCoords (row, col) = r + c0
  where
    r0 = row - 1
    c0 = col - 1
    r = sumUpTo (r0 + c0) + 1

codeAt :: (Int, Int) -> Int
codeAt coords = nextCode (fromCoords coords) 20151125
  where
    nextCode 1 c = c
    nextCode n c = nextCode (n - 1) (snd $ (c * 252533) `divMod` 33554393)


instance Challenge (Int, Int) where
  parse _ = (2978, 3083)
  partOne = show . codeAt
  partTwo _ = "Weather machine repaired!"

